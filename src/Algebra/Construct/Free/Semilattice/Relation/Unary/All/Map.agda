{-# OPTIONS --cubical --safe #-}

module Algebra.Construct.Free.Semilattice.Relation.Unary.All.Map where

open import Prelude hiding (‚ä•; ‚ä§)
open import Algebra.Construct.Free.Semilattice.Eliminators
open import Algebra.Construct.Free.Semilattice.Definition
open import Cubical.Foundations.HLevels
open import Data.Empty.UniversePolymorphic
open import HITs.PropositionalTruncation.Sugar
open import HITs.PropositionalTruncation.Properties
open import HITs.PropositionalTruncation
open import Data.Unit.UniversePolymorphic
open import Algebra.Construct.Free.Semilattice.Relation.Unary.All.Def

private
  variable p : Level

map-‚óª : ‚àÄ {p} {P : A ‚Üí Type p} ‚Üí (‚àÄ x ‚Üí P x) ‚Üí ‚àÄ xs ‚Üí ‚óª P xs
map-‚óª {A = A} {P = P} = Œª f ‚Üí ‚à• map-‚óª‚Ä≤ f ‚à•‚áì
  where
  map-‚óª‚Ä≤ : (‚àÄ x ‚Üí P x) ‚Üí xs ‚ààùí¶ A ‚áí‚à• ‚óª P xs ‚à•
  ‚à• map-‚óª‚Ä≤ f ‚à•-prop {xs} = isProp-‚óª {P = P} {xs = xs}
  ‚à• map-‚óª‚Ä≤ f ‚à•[] = tt
  ‚à• map-‚óª‚Ä≤ f ‚à• x ‚à∑ xs ‚ü® Pxs ‚ü© = ‚à£ f x ‚à£ , Pxs
