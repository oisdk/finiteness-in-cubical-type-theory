{-# OPTIONS --cubical --safe #-}

module Algebra.Construct.Free.Semilattice.Relation.Unary.All.Dec where

open import Prelude hiding (‚ä•; ‚ä§)
open import Algebra.Construct.Free.Semilattice.Eliminators
open import Algebra.Construct.Free.Semilattice.Definition
open import Cubical.Foundations.HLevels
open import Data.Empty.UniversePolymorphic
open import HITs.PropositionalTruncation.Sugar
open import HITs.PropositionalTruncation.Properties
open import HITs.PropositionalTruncation
open import Data.Unit.UniversePolymorphic
open import Algebra.Construct.Free.Semilattice.Relation.Unary.All.Def
open import Relation.Nullary
open import Relation.Nullary.Decidable
open import Relation.Nullary.Decidable.Properties
open import Relation.Nullary.Decidable.Logic

private
  variable p : Level

‚óª‚Ä≤? : ‚àÄ {P : A ‚Üí Type p} ‚Üí (‚àÄ x ‚Üí Dec (P x)) ‚Üí xs ‚ààùí¶ A ‚áí‚à• Dec (‚óª P xs) ‚à•
‚à• ‚óª‚Ä≤? {P = P} P? ‚à•-prop {xs} = isPropDec (isProp-‚óª {P = P} {xs = xs})
‚à• ‚óª‚Ä≤? P? ‚à•[] = yes tt
‚à• ‚óª‚Ä≤? P? ‚à• x ‚à∑ xs ‚ü® Pxs ‚ü© = map-dec ‚à£_‚à£ refute-trunc (P? x) && Pxs

‚óª? : ‚àÄ {P : A ‚Üí Type p} ‚Üí (‚àÄ x ‚Üí Dec (P x)) ‚Üí ‚àÄ xs ‚Üí Dec (‚óª P xs)
‚óª? P? = ‚à• ‚óª‚Ä≤? P? ‚à•‚áì
