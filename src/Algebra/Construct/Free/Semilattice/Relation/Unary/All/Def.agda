{-# OPTIONS --cubical --safe #-}

module Algebra.Construct.Free.Semilattice.Relation.Unary.All.Def where

open import Prelude hiding (‚ä•; ‚ä§)
open import Algebra.Construct.Free.Semilattice.Eliminators
open import Algebra.Construct.Free.Semilattice.Definition
open import Cubical.Foundations.HLevels
open import Data.Empty.UniversePolymorphic
open import HITs.PropositionalTruncation.Sugar
open import HITs.PropositionalTruncation.Properties
open import HITs.PropositionalTruncation
open import Data.Unit.UniversePolymorphic

private
  variable p : Level

dup-‚óª : (P : A ‚Üí Type p) ‚Üí (x : A) (xs : Type p) ‚Üí (‚à• P x ‚à• √ó ‚à• P x ‚à• √ó xs) ‚áî (‚à• P x ‚à• √ó xs)
dup-‚óª P _ _ .fun = snd
dup-‚óª P _ _ .inv (x , xs) = x , x , xs
dup-‚óª P _ _ .rightInv (x , xs) = refl
dup-‚óª P _ _ .leftInv  (x‚ÇÅ , x‚ÇÇ , xs) i .fst = squash x‚ÇÇ x‚ÇÅ i
dup-‚óª P _ _ .leftInv  (x‚ÇÅ , x‚ÇÇ , xs) i .snd = (x‚ÇÇ , xs)

com-‚óª : (P : A ‚Üí Type p) ‚Üí (x y : A) (xs : Type p) ‚Üí (‚à• P x ‚à• √ó ‚à• P y ‚à• √ó xs) ‚áî (‚à• P y ‚à• √ó ‚à• P x ‚à• √ó xs)
com-‚óª P _ _ _ .fun (x , y , xs) = y , x , xs
com-‚óª P _ _ _ .inv (y , x , xs) = x , y , xs
com-‚óª P _ _ _ .leftInv  (x , y , xs) = refl
com-‚óª P _ _ _ .rightInv (x , y , xs) = refl

‚óª‚Ä≤ : (P : A ‚Üí Type p) ‚Üí A ‚Üò hProp p
[ ‚óª‚Ä≤ P ]-set = isSetHProp
([ ‚óª‚Ä≤ P ] x ‚à∑ (xs , hxs)) .fst = ‚à• P x ‚à• √ó xs
([ ‚óª‚Ä≤ P ] x ‚à∑ (xs , hxs)) .snd y z = Œ£Prop‚â° (Œª _  ‚Üí hxs) (squash (fst y) (fst z))
[ ‚óª‚Ä≤ P ][] = ‚ä§ , Œª x y _ ‚Üí x
[ ‚óª‚Ä≤ P ]-dup x xs = Œ£Prop‚â° (Œª _ ‚Üí isPropIsProp) (isoToPath (dup-‚óª P x (xs .fst)))
[ ‚óª‚Ä≤ P ]-com x y xs = Œ£Prop‚â° (Œª _ ‚Üí isPropIsProp) (isoToPath (com-‚óª P x y (xs .fst)))

‚óª : (P : A ‚Üí Type p) ‚Üí ùí¶ A ‚Üí Type p
‚óª P xs = [ ‚óª‚Ä≤ P ]‚Üì xs .fst

isProp-‚óª : ‚àÄ {P : A ‚Üí Type p} {xs} ‚Üí isProp (‚óª P xs)
isProp-‚óª {P = P} {xs = xs} = [ ‚óª‚Ä≤ P ]‚Üì xs .snd
